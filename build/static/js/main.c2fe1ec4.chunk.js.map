{"version":3,"sources":["AddAnswer.js","Question.js","AddQuestion.js","QuestionList.js","NotFound.js","App.js","index.js"],"names":["PostAnswer","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","text","rating","_this2","console","log","react_default","a","createElement","style","padding","type","onChange","e","setState","target","value","placeholder","width","onClick","postAnswersToDB","originalQuestionID","Component","Question","questions","fetch","response","json","questionsArray","currentQuestion","find","question","_id","match","params","id","_this3","title","description","answers","length","map","dat","key","message","color","ranking","updateRating","AddAnswer","questionsID","AddQuestion","postDataToDB","QuestionsList","el","Link","to","src_AddQuestion","form","App","API_URL","window","location","href","bind","assertThisInitialized","method","body","JSON","stringify","headers","Headers","Content-Type","originalPostId","answer","originalAnswerId","parseInt","elm","Number","BrowserRouter","className","Switch","Route","exact","path","render","QuestionList","assign","header","src_Question","component","NotFound","ReactDOM","src_App","document","getElementById"],"mappings":"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","file":"static/js/main.c2fe1ec4.chunk.js","sourcesContent":["import React, {Component} from 'react';\r\nimport props from \"./App\";\r\nclass PostAnswer extends Component {\r\n    constructor(props){\r\n        super(props)\r\n        this.state = {\r\n            text: null,\r\n            rating: null\r\n        }\r\n    }\r\n    render() {\r\n        console.log(this)\r\n        return (\r\n            <div style={{ padding: \"10px\" }}>\r\n                <input\r\n                    type=\"text\"\r\n                    onChange={e => this.setState({ text: e.target.value })}\r\n                    placeholder=\"This is how you start\"\r\n                    style={{ width: \"200px\" }}\r\n                />\r\n                <button onClick={() => this.props.postAnswersToDB(this.state.text, this.props.originalQuestionID)}>\r\n                    Submit answer\r\n                </button>\r\n\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default PostAnswer;","import React, {Component} from 'react';\r\nimport {Link} from \"react-router-dom\";\r\nimport AddAnswer from \"./AddAnswer\";\r\nimport props from \"./App\";\r\n\r\nclass Question extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {questions:[]}\r\n    }\r\n\r\n    async componentWillMount() {\r\n        //await data.\r\n        const response = await fetch(\r\n            `http://localhost:8080/questions2`\r\n        );\r\n\r\n        //assign to const json and set state when we receive data\r\n        const questionsArray = await response.json();\r\n\r\n        this.setState({ currentQuestion: questionsArray.find(question => question._id === this.props.match.params.id) });\r\n        console.log(this.state.currentQuestion)\r\n    }\r\n\r\n    render() {\r\n        console.log(this)\r\n        // const {title, description} = this.state.currentQuestion\r\n        //  this.state.questions.forEach((elm) => {\r\n        //     list.push(<li key={elm.id}>\r\n        //         <Link key={elm.id} to={`/questions/with/${elm.topic}`}>{elm.topic}</Link>\r\n        //     </li>)\r\n        // });\r\n        return (\r\n            this.state.currentQuestion ? <div>\r\n                    <h3>{this.state.currentQuestion.title}</h3>\r\n                    <p>{this.state.currentQuestion.description}</p>\r\n                    <ul>\r\n                        {this.state.currentQuestion.answers.length <= 0\r\n                            ? \"NO Answers yet\"\r\n                            : this.state.currentQuestion.answers.map(dat => (\r\n                                <li style={{ padding: \"10px\" }} key={this.state.currentQuestion.message}>\r\n                                    <span style={{ color: \"gray\" }}> </span> {dat.text} <br />\r\n                                    <span style={{ color: \"gray\" }}> </span> {dat.ranking} <br />\r\n\r\n                                    {dat.message}\r\n                                    <button onClick={() => this.props.updateRating(dat.ranking, dat._id, this.state.currentQuestion._id, dat.text)}>\r\n                                        Increase rating\r\n                                    </button>\r\n                                </li>\r\n                            ))}\r\n                    </ul>\r\n                <AddAnswer\r\n                    postAnswersToDB={this.props.postAnswersToDB} originalQuestionID={this.props.questionsID}\r\n                />\r\n                        </div>\r\n                    : null\r\n        );\r\n    }\r\n}\r\n\r\nexport default Question;","import React, {Component} from 'react';\r\nimport props from \"./App\";\r\n\r\nclass AddQuestion extends Component {\r\n    constructor(props){\r\n        super(props)\r\n        this.state = {\r\n            title: null,\r\n            description: null\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div style={{ padding: \"10px\" }}>\r\n                <input\r\n                    type=\"text\"\r\n                    onChange={e => this.setState({ title: e.target.value })}\r\n                    placeholder=\"How do I hack NASA\"\r\n                    style={{ width: \"200px\" }}\r\n                />\r\n                <input\r\n                    type=\"text\"\r\n                    onChange={e => this.setState({ description: e.target.value })}\r\n                    placeholder=\"I just learn html and want to hack NASA, can you help me?\"\r\n                    style={{ width: \"200px\" }}\r\n                />\r\n                <button onClick={() => this.props.postDataToDB(this.state.title, this.state.description )}>\r\n                    Submit\r\n                </button>\r\n            </div>\r\n        );\r\n    }\r\n}\r\nexport default AddQuestion;","import React, { Component } from 'react';\r\nimport { Link } from \"react-router-dom\";\r\nimport AddQuestion from \"./AddQuestion\";\r\nimport props from \"./App\";\r\n\r\nclass QuestionsList extends Component {\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <h3>List of questions</h3>\r\n                {this.props.questions.map(el => (\r\n                   <Link key={el._id} to={\"/question/\"+el._id}><p>Title: {el.title},<br></br>\r\n                        Description: {el.description},<br></br>\r\n                       </p></Link>\r\n                ))}\r\n\r\n                <AddQuestion\r\n                    postDataToDB={this.props.postDataToDB} form={this.props.form}/>\r\n            </div>\r\n\r\n        );\r\n\r\n    }\r\n}\r\nexport default QuestionsList;","import React, {Component} from 'react';\nimport {Link} from \"react-router-dom\";\n\nclass Question extends Component {\n\n    render() {\n        return (\n            <div>\n                <h3>404 Not Found</h3>\n\n                <Link to={'/'}>Go back to the front page...</Link>\n            </div>\n        );\n    }\n}\n\nexport default Question;\n","import React, { Component } from 'react';\r\nimport {  BrowserRouter as Router, Route, Link, Switch } from 'react-router-dom';\r\nimport './index.css';\r\nimport Question from \"./Question\";\r\nimport QuestionList from \"./QuestionList\";\r\nimport NotFound from \"./NotFound\";\r\nimport AddQuestion from \"./AddQuestion\";\r\nimport AddAnswer from \"./AddAnswer\";\r\nimport axios from \"axios\";\r\n\r\nclass App extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = { questions: [] }\r\n        // this.handleChange = this.handleChange.bind(this);\r\n        this.API_URL = window.location.href;\r\n\r\n        this.postDataToDB = this.postDataToDB.bind(this);\r\n        this.postAnswersToDB = this.postAnswersToDB.bind(this);\r\n    }\r\n    // handleChange() {\r\n    //     console.log(\"test\");\r\n    // }\r\n\r\n    async componentWillMount() {\r\n        //await data.\r\n        const response = await fetch(\r\n            \"/questions2\"\r\n        );\r\n\r\n        //assign to const json and set state when we receive data\r\n        const json = await response.json();\r\n        this.setState({ questions: json });\r\n    }\r\n\r\n    postDataToDB(title, description){\r\n        fetch(\"/questions\", {\r\n            method:'post',\r\n              body: JSON.stringify({\r\n                    \"title\": title,\r\n                    \"description\": description,\r\n                    \"answers\": []\r\n                }),\r\n            headers: new Headers({ \"Content-Type\": \"application/json\" }) // add headers\r\n\r\n    })\r\n            //.then(response => response.json())\r\n    }\r\n    postAnswersToDB(text, id){\r\n        fetch(\"/questions/:id/answers\",{\r\n            method: 'put',\r\n            body: JSON.stringify({\r\n                \"originalPostId\": id,\r\n                \"answer\": text,\r\n            }),\r\n            headers: new Headers({ \"Content-Type\": \"application/json\" }) // add headers\r\n\r\n        })\r\n            // .then(response => response.json())\r\n    }\r\n    updateRating(ranking, id, originalPostId, text){\r\n        fetch('/questions/:id/rating', {\r\n            method:'put',\r\n            body:JSON.stringify({\r\n                \"originalAnswerId\": id,\r\n                \"ranking\": parseInt(ranking),\r\n                \"originalPostId\":originalPostId,\r\n                \"text\":text,\r\n            }),\r\n            headers: new Headers({ \"Content-Type\": \"application/json\" }) // add headers\r\n        })\r\n\r\n            // .then(response=> response.json())\r\n        //             // .then(response => console.log(response.json))\r\n    }\r\n    // putDataToDB = (title,description) => {\r\n    //     let currentIds = this.state.questions.map(questions => questions.id);\r\n    //     let idToBeAdded = 0;\r\n    //     while (currentIds.includes(idToBeAdded)) {\r\n    //         ++idToBeAdded;\r\n    //     }\r\n    //\r\n    //     axios.post(\"http://localhost:8080/questions2\", {\r\n    //         id: idToBeAdded,\r\n    //         title: title,\r\n    //         description: description\r\n    //     });\r\n    // };\r\n\r\n   \r\n    async getQuestionFromId(id) {\r\n               //await data.\r\n               const response = await fetch(\r\n                \"/questions2\"\r\n            );\r\n    \r\n            //assign to const json and set state when we receive data\r\n            const json = await response.json();\r\n            this.setState({ questions: json });\r\n            return this.state.questions.find((elm) => Number(elm.id) === Number(id));\r\n    }\r\n    render() {\r\n        var questions = this.state.questions;\r\n        console.log(this.state.questions);\r\n        return (\r\n            <Router>\r\n                <div className=\"container\">\r\n                    <h1>StackOverflow</h1>\r\n                    <Switch>\r\n                    <Route exact path={'/'}\r\n                            render={(props) =>\r\n                                <QuestionList {...props}\r\n                                    questions={questions}\r\n                                    header={'Questions Asked'} postDataToDB={this.postDataToDB} form={this.postDataToDB}/>\r\n\r\n\r\n\r\n                            }\r\n                        />\r\n\r\n                        <Route exact path={'/question/:id'}\r\n                            render={(props) => <Question {...props}\r\n                                questionsID={props.match.params.id} postAnswersToDB={this.postAnswersToDB}\r\n                            updateRating={this.updateRating.bind(this)}/>\r\n\r\n                            }\r\n                        />\r\n\r\n                        <Route component={NotFound} />\r\n                    </Switch>\r\n                </div>\r\n            </Router>\r\n        );\r\n    }\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}